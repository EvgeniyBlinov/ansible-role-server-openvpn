---
- name: openvpn | Ensure local config dir exists
  file:
    path: "{{ openvpn__local_config_dir }}"
    state: directory
  delegate_to: localhost

- name: openvpn | Ensure openvpn dirs exists
  file:
    path: "{{ item }}"
    state: directory
  loop:
    - "{{ openvpn__work_dir }}"

- name: openvpn | Clone openvpn src
  git:
    repo: "{{ openvpn__src_repo }}"
    dest: "{{ openvpn__src_dir }}"
    version: "{{ openvpn__docker_openvpn__branch }}"
  when: openvpn__docker_openvpn__clone

#- name: openvpn | Build image
  #docker_image:
     #path: "{{ openvpn__src_repo }}"
     #name: "{{ openvpn__image_name }}"

- name: openvpn | Generate starter script
  template:
    src: start.sh
    dest: "{{ openvpn__work_dir }}/start.sh"
    mode: +x

- name: openvpn | Get image name
  shell: >-
    docker images | awk '/cent\/openvpn-docker/{print $1}' | head -1
  register: _openvpn__OVPN_IMAGE_NAME
  ignore_errors: true
  when: openvpn__OVPN_IMAGE_NAME == ""

- set_fact:
    openvpn__OVPN_IMAGE_NAME: "{{ _openvpn__OVPN_IMAGE_NAME.stdout }}"
  when:
     openvpn__OVPN_IMAGE_NAME == "" and
    _openvpn__OVPN_IMAGE_NAME.stdout != ""

- set_fact:
    openvpn__OVPN_IMAGE_NAME: "cent/openvpn-docker_{{ lookup('pipe', 'date +%F') }}"
  when:
    openvpn__OVPN_IMAGE_NAME == "" and
    _openvpn__OVPN_IMAGE_NAME.stdout == ""

- name: openvpn | Generate .env
  copy:
    content: |-
      OVPN_SERVER_NAME={{ openvpn__server_name }}
      OVPN_PORT={{ openvpn__port }}
      OVPN_IMAGE_NAME={{ openvpn__OVPN_IMAGE_NAME }}
    dest: "{{ openvpn__work_dir }}/.env"
    mode: +x

- name: openvpn | Is data exists
  stat:
    path: "{{ openvpn__work_dir }}/data"
  register: _openvpn__data

- name: openvpn | Fetch configs
  synchronize:
    mode: pull
    src: "{{ openvpn__work_dir }}/data"
    dest: "{{ openvpn__local_config_dir }}/data"
  when: _openvpn__data.stat.exists
  tags:
    - backup
